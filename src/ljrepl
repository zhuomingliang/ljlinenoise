#!/usr/bin/luajit -E
--
-- ljlinenoise : <http://fperrad.github.io/ljlinenoise/>
--

local copyright = "LuaJIT REPL\tCopyright (C) 2014 Francois Perrad"

-- works with lua-linenoise instead of ljlinenoise/ljsyscall
local isatty = true
pcall(function ()
    isatty = require'syscall'.stdin:isatty()
end)

local function jit_status ()
    local t = { jit.status() }
    t[1] = 'JIT: ' .. (t[1] and 'ON' or 'OFF')
    return table.concat(t, ' ')
end

local function dofile (fname)
    local f, msg = loadfile(fname)
    if f then
        f()
    else
       error(msg, 0)
    end
end

local function dostring (chunk, name)
    local f, msg = load(chunk, name)
    if f then
        f()
    else
       error(msg, 0)
    end
end

local function dolibrary (name)
    local r, msg = pcall(require, name)
    if r then
        return r
    else
        error(msg, 0)
    end
end

local function runcmdopt (f, opt)
    local r, msg
    if opt == '' then
        r, msg = pcall(f)
    else
        r, msg = pcall(f, opt:match((opt:gsub("[^,]+", "([^,]+)"))))
    end
    if r then
        return r
    else
        error(msg, 0)
    end
end

local function loadjitmodule (name)
    local r, mod = pcall(require, 'jit.' .. name)
    if not r then
        error("unknown luaJIT command or jit.* modules not installed", 0)
    end
    return mod.start
end

local function dojitcmd (cmd)
    local opt
    cmd, opt = cmd:match("([^=]*)=?(.*)")
    local f = jit[cmd]
    if type(f) ~= 'function' then
        f = loadjitmodule(cmd)
    end
    return runcmdopt(f, opt)
end

local function dojitopt (opt)
    return runcmdopt(jit.opt.start, opt)
end

local function dobytecode (n)
    local t = {}
    local argn = arg[n]:sub(3)
    if argn then
        t[1] = '-' .. argn
    end
    for i = n+1, #arg do
        t[#t+1] = arg[i]
    end
    local r, msg = pcall(loadjitmodule('bcsave'), unpack(t))
    if r then
        return r
    else
        error(msg, 0)
    end
end

local function handle_script (script)
    local fname = arg[script]
    arg[-2] = arg[-1]
    arg[-1] = arg[0]
    arg[0] = fname
    for i = script+1, #arg do
        arg[i-script] = arg[i]
    end
    if fname == '-' then
        fname = nil
    end
    dofile(fname)
end

local function dotty ()
    local l = require 'linenoise'
    local history = '.history_lua'
    l.loadhistory(history)
    for line in l.lines( '> ') do
        if #line > 0 then
            local r, msg = pcall(function () dostring(line, '=stdin') end)
            if msg then
                print(msg)
            end
            l.addhistory(line)
            l.savehistory(history)
        end
    end
end

local function collectargs (opt)
    local i = 1
    while i <= #arg do
        local args = arg[i]
        if args:sub(1, 1) ~= '-' then   -- not an option?
            return i
        end
        local arg1 = args:sub(2, 2)
        if arg1 == '-' then
            if #args > 2 then return nil end
            return arg[i+1] and i+1 or 0
        elseif arg1 == '' then
            return i
        elseif arg1 == 'i' then
            if #args > 2 then return nil end
            opt.interactive = true
            opt.version = true
        elseif arg1 == 'v' then
            if #args > 2 then return nil end
            opt.version = true
        elseif arg1 == 'e' then
            opt.exec = true
            if #args == 2 then
                i = i + 1
                if arg[i] == nil then return nil end
            end
        elseif arg1 == 'l' or arg1 == 'j' then
            if #args == 2 then
                i = i + 1
                if arg[i] == nil then return nil end
            end
        elseif arg1 == 'O' then
            -- nothing
        elseif arg1 == 'b' then
            if opt.version or opt.interactive then
                return nil
            end
            opt.exec = true
            return i + 1
        elseif arg1 == 'E' then
            opt.no_env = true
        else
            return nil  -- invalid option
        end
        i = i + 1
    end
    return i
end

local function runargs(n)
    local i = 1
    while i < n do
        local args = arg[i]
        local arg2 = args:sub(1, 2)
        if     arg2 == '-e' then
            local chunk = args:sub(3)
            if chunk == '' then
                i = i + 1
                chunk = arg[i]
            end
            dostring(chunk, "=(command line)")
        elseif arg2 == '-l' then
            local name = args:sub(3)
            if name == '' then
                i = i + 1
                name = arg[i]
            end
            dolibrary(name)
        elseif arg2 == '-j' then
            local cmd = args:sub(3)
            if cmd == '' then
                i = i + 1
                cmd = arg[i]
            end
            dojitcmd(cmd)
        elseif arg2 == '-O' then
            dojitopt(args:sub(3))
        elseif arg2 == '-b' then
            return dobytecode(i)
        end
        i = i + 1
    end
end

local function handle_luainit ()
    local init = os.getenv('LUA_INIT')
    if init then
        if init:sub(1, 1) == '@' then
            dofile(init:sub(2))
        else
            dostring(init, '=LUA_INIT')
        end
    end
end

local function setpath (name, val)
    if val then
        package[name] = val:gsub(';;', ';' .. package[name] .. ';')
    end
end

local progname = arg[0]
local opt = {}
local script = collectargs(opt)
if not script then
    io.stderr:write(string.format([=[
usage: %s [options]... [script [args]...].
Available options are:
  -e chunk  Execute string 'chunk'.
  -l name   Require library 'name'.
  -b ...    Save or list bytecode.
  -j cmd    Perform LuaJIT control command.
  -O[opt]   Control LuaJIT optimizations.
  -i        Enter interactive mode after executing 'script'.
  -v        Show version information.
  -E        Ignore environment variables.
  --        Stop handling options.
  -         Execute stdin and stop handling options.
]=], progname))
else
    if opt.version then
        print(copyright)
    end
    if not opt.no_env then
        setpath('path', os.getenv('LUA_PATH'))
        setpath('cpath', os.getenv('LUA_CPATH'))
        handle_luainit()
    end
    runargs(script)             -- execute arguments
    if arg[script] then
        handle_script(script)   -- execute main script
    end
    if opt.interactive then
        print(jit_status())
        dotty()
    elseif not arg[script] and not opt.exec and not opt.version then
        if isatty then
            print(copyright)
            print(jit_status())
            dotty()
        else
            dofile()            -- executes stdin as a file
        end
    end
end
